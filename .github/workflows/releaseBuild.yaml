# ReleaseBuild Workflow
#
# This GitHub Actions workflow performs the publication process for a FHIR IG Release.
#
# Based on these workflows:
# https://github.com/medigree/base/blob/main/.github/workflows/ghbuild.yml
# https://github.com/WorldHealthOrganization/smart-html/blob/main/.github/workflows/release.yml

name: "ReleaseBuild"

# Controls when the action will run.
on:
  workflow_call: # Reusable by other workflows.
  # Triggers the workflow on push or pull request events.
  push:
    branches: # Only triggers on pushes on these branches.
      - "master"
        # Temporarily enable to test the workflow on a feature branch.
      - "*/feature/**"
      #- "releases/**"
  pull_request:

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: "ubuntu-latest"

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Get branch name
        run: echo ${GITHUB_REF##*/}
      
        # Cache Fish output for usage in other jobs.
      - name: Output cache
        id: fsh-cache
        uses: actions/cache@v3
        with:
          path: |
            static/**
            output/**
            fsh-content/sushi-config.yaml
          key: ${{ runner.os }}-fsh-${{ hashFiles('static/**') }}-${{ hashFiles('output/**') }}
          restore-keys: ${{ runner.os }}-fsh-

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      - name: Update the image to the latest publisher
        uses: docker://hl7fhir/ig-publisher-base:latest
        with:
          # Get the latest publisher - don't run the batch script but run the line directly
          args: >-
            curl -L https://github.com/HL7/fhir-ig-publisher/releases/latest/download/publisher.jar -o ./input-cache/publisher.jar --create-dirs

      - name: Create package cache folder
        uses: docker://hl7fhir/ig-publisher-base:latest
        with:
          entrypoint: /bin/sh
          args: -c "mkdir -p ./fhir-package-cache && chown 1001:127 ./fhir-package-cache"

      - name: Run the IG publisher
        uses: docker://hl7fhir/ig-publisher-base:latest
        with:
          # Run the publisher - don't run the batch script but run the line directly
          args: >
            java -Xmx4g -jar ./input-cache/publisher.jar publisher -ig . -auto-ig-build
                 -repo https://github.com/${{github.repository}} -package-cache-folder ./fhir-package-cache

  release:
    runs-on: "ubuntu-latest"
    needs: build
    # Only deploy on pushes to master.
    #if: github.ref == 'refs/heads/master'
      
    env:
      AWS_BUCKET: "ehealth-documentation-github"
      DEST_DIR: "latest/ig"

    steps:
        # Retrieve cached Fish output.
      - name: Output cache
        id: fsh-cache
        uses: actions/cache@v3
        with:
          path: |
            static/**
            output/**
            fsh-content/sushi-config.yaml
          key: ${{ runner.os }}-fsh-${{ hashFiles('static/**') }}-${{ hashFiles('output/**') }}
      
        # Load the IG config from the sushi-config.yaml file.
      - name: IG Version
        id: ig-version
        uses: pietrobolcato/action-read-yaml@1.1
        with:
          config: ${{ github.workspace }}/fsh-content/sushi-config.yaml
        
        # Change the default destination directory to the IG version if it's not the latest.
      - name: IG Path version
        if: steps.ig-version.outputs['version'] != 'latest'
        run: echo "DEST_DIR=v${{ steps.ig-version.outputs['version'] }}/ig" >> "$GITHUB_ENV"

        # Configure the AWS CLI.
      - name: Set up S3cmd cli tool
        uses: s3-actions/s3cmd@v1
        with:
          provider: aws # default is linode
          region: 'eu-west-1'
          access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          secret_key: ${{ secrets.AWS_ACCESS_KEY_SECRET }}

      - name: Deploy IG to S3
        run: s3cmd sync --delete-removed --acl-public --no-mime-magic --guess-mime-type --no-preserve --no-progress --verbose --recursive output/ s3://${{ env.AWS_BUCKET }}/${{ env.DEST_DIR }}

      - name: Deploy static files to S3
        run: |
          s3cmd del --force "s3://${{ env.AWS_BUCKET }}/index.html"
          s3cmd put --acl-public --no-mime-magic --guess-mime-type --no-preserve --no-progress --verbose "static/index.html" "s3://${{ env.AWS_BUCKET }}/index.html"

          s3cmd del --force "s3://${{ env.AWS_BUCKET }}/sitemap.txt"
          s3cmd put --acl-public --no-mime-magic --guess-mime-type --no-preserve --no-progress --verbose "static/sitemap.txt" "s3://${{ env.AWS_BUCKET }}/sitemap.txt"

          s3cmd del --force "s3://${{ env.AWS_BUCKET }}/robots.txt"
          s3cmd put --acl-public --no-mime-magic --guess-mime-type --no-preserve --no-progress --verbose "static/robots.txt" "s3://${{ env.AWS_BUCKET }}/robots.txt"

      - name: Deploy latest released to S3
        if: steps.ig-version.outputs['version'] == 'latest'
        run: s3cmd sync --delete-removed --acl-public --no-mime-magic --guess-mime-type --no-preserve --no-progress --verbose --recursive output/ s3://${{ env.AWS_BUCKET }}/latest-released/ig